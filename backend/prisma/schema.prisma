// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String
  password     String // Hashed password
  role         String   @default("USER")
  groupId      Int?     // グループID（任意）
  isFirstLogin Boolean  @default(true) // 初回ログインフラグ
  lastLoginAt  DateTime? // 最終ログイン日時
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  group       Group?       @relation(fields: [groupId], references: [id])
  viewingLogs ViewingLog[]
  notifications Notification[]
}

model Group {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  code        String   @unique  // グループコード
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users        User[]
  groupCourses GroupCourse[]
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  thumbnailUrl String?  // サムネイル画像URL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  curriculums  Curriculum[]
  groupCourses GroupCourse[]
}

model Curriculum {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  courseId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course Course  @relation(fields: [courseId], references: [id])
  videos Video[]
}

model Video {
  id            Int      @id @default(autoincrement())
  title         String
  description   String?
  videoUrl      String
  curriculumId  Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  curriculum  Curriculum @relation(fields: [curriculumId], references: [id])
  viewingLogs ViewingLog[]
}

model ViewingLog {
  id              Int      @id @default(autoincrement())
  userId          Int
  videoId         Int
  watchedSeconds  Int      @default(0) // 累計視聴秒数
  isCompleted     Boolean  @default(false) // 視聴完了フラグ
  lastWatchedAt   DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  video Video @relation(fields: [videoId], references: [id])

  @@unique([userId, videoId]) // ユーザーと動画の組み合わせはユニーク
}

model GroupCourse {
  id        Int      @id @default(autoincrement())
  groupId   Int
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group  Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([groupId, courseId]) // グループとコースの組み合わせはユニーク
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String   // 'first_login_reminder', 'progress_reminder', etc.
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}